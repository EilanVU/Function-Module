FUNCTION ZFM_GET_CLASSIFICATION.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IV_MATNR) TYPE  MATNR
*"     REFERENCE(IV_WERKS) TYPE  WERKS_D
*"     REFERENCE(IV_CHARG) TYPE  CHARG_D
*"     REFERENCE(IV_VENDORTAB) TYPE  MARK OPTIONAL
*"  EXPORTING
*"     REFERENCE(ES_CLASSIFICATION) TYPE  ZST_GET_BATCH_CLASS
*"  TABLES
*"      T_CLASS STRUCTURE  SCLASS OPTIONAL
*"      T_OBJECTDATA STRUCTURE  CLOBJDAT OPTIONAL
*"      I_SEL_CHARACTERISTIC STRUCTURE  SEL_CHAR OPTIONAL
*"      T_NO_AUTH_CHARACT STRUCTURE  KLMERKS OPTIONAL
*"----------------------------------------------------------------------

  DATA: LV_KZDCH       LIKE TCUCH-KZDCH.
  DATA: LV_CLASSTYPE   LIKE KLAH-KLART.
  DATA: LV_OBJECT      LIKE AUSP-OBJEK.
  DATA: LV_OBJECTTABLE LIKE TCLA-OBTAB.
  DATA: BEGIN OF CH_OBJECT_MCHA,
          MATNR      LIKE  MCHA-MATNR,
          WERKS      LIKE  MCHA-WERKS,
          CHARG      LIKE  MCHA-CHARG,
          FILLER(18),
        END OF CH_OBJECT_MCHA.
  DATA: BEGIN OF CH_OBJECT_MCH1,
          MATNR      LIKE  MCH1-MATNR,
          CHARG      LIKE  MCH1-CHARG,
          FILLER(22),
        END OF CH_OBJECT_MCH1.

* Internal Table with Classificaton data
  DATA: BEGIN OF I_CLOBJDAT OCCURS 20.
          INCLUDE STRUCTURE CLOBJDAT.
  DATA: END OF I_CLOBJDAT.

* Internal Table with Classes
  DATA: BEGIN OF I_CLASS OCCURS 5.
          INCLUDE STRUCTURE SCLASS.
  DATA: END OF I_CLASS.

  DATA:
        LT_CLASS TYPE TABLE OF SCLASS,
        LT_OBJECTDATA TYPE TABLE OF CLOBJDAT,
        LS_OBJECTDATA TYPE CLOBJDAT.

  DATA:
        LV_SBIN  TYPE ZE05_SBIN,
        LV_IDATE  TYPE CHAR10,
        LV_EDATE  TYPE CHAR10,
        LS_LFA1  TYPE LFA1.

  DATA:
        LV_LIFNR TYPE LIFNR,
        LV_NAME TYPE NAME1_GP,
        LV_NAME_234 TYPE NAME1_GP,
        LV_HTYPE TYPE DD01V-DATATYPE.

  CALL FUNCTION 'VB_BATCH_DEFINITION'
    IMPORTING
      KZDCH = LV_KZDCH.

  IF LV_KZDCH EQ '0'.
    LV_CLASSTYPE   = '022'.
    LV_OBJECTTABLE = 'MCHA'.
    CH_OBJECT_MCHA-MATNR = IV_MATNR.
    CH_OBJECT_MCHA-WERKS = IV_WERKS.
    CH_OBJECT_MCHA-CHARG = IV_CHARG.
    LV_OBJECT = CH_OBJECT_MCHA.
  ELSE.
    LV_CLASSTYPE   = '023'.
    LV_OBJECTTABLE = 'MCH1'.
    CH_OBJECT_MCH1-MATNR = IV_MATNR.
    CH_OBJECT_MCH1-CHARG = IV_CHARG.
    LV_OBJECT = CH_OBJECT_MCH1.
  ENDIF.

  CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
    EXPORTING
      CLASSTYPE         = LV_CLASSTYPE
      FEATURES          = 'X'
      OBJECT            = LV_OBJECT
      OBJECTTABLE       = LV_OBJECTTABLE
    TABLES
      T_CLASS           = T_CLASS
      T_OBJECTDATA      = T_OBJECTDATA
    EXCEPTIONS
      NO_CLASSIFICATION = 1
      NO_CLASSTYPES     = 2.

*------------------------------------------------------------------------------
  " Get Vendor from Migo
  SELECT SINGLE
    LFA1~LIFNR
    LFA1~NAME1
    FROM MCH1
    LEFT JOIN LFA1 ON MCH1~LIFNR = LFA1~LIFNR
    INTO CORRESPONDING FIELDS OF LS_LFA1
    WHERE MCH1~MATNR = IV_MATNR
    AND MCH1~CHARG = IV_CHARG.

  ES_CLASSIFICATION-VENDOR = LS_LFA1-NAME1.
  IF ES_CLASSIFICATION-VENDOR IS INITIAL.
    ES_CLASSIFICATION-VENDOR = LS_LFA1-LIFNR.
  ENDIF.
*------------------------------------------------------------------------------
  LOOP AT T_OBJECTDATA INTO LS_OBJECTDATA.
    CASE LS_OBJECTDATA-ATNAM.
      WHEN 'Z_GHICHU'.
        IF LS_OBJECTDATA-AUSP1 <> '?'.
          ES_CLASSIFICATION-Z_GHICHU = LS_OBJECTDATA-AUSP1.
        ENDIF.
      WHEN 'Z_LSX'.
        IF LS_OBJECTDATA-AUSP1 <> '?'.
          ES_CLASSIFICATION-Z_LSX = LS_OBJECTDATA-AUSP1.
        ENDIF.
      WHEN 'Z_VITRI'.
        IF LS_OBJECTDATA-AUSP1 <> '?'.
          ES_CLASSIFICATION-Z_VITRI = LS_OBJECTDATA-AUSP1.
        ENDIF.

        IF ES_CLASSIFICATION-Z_VITRI IS INITIAL.
          SELECT SINGLE SBIN
            FROM MARC
            INTO LV_SBIN
            WHERE WERKS = IV_WERKS
            AND MATNR = IV_MATNR.
          ES_CLASSIFICATION-Z_VITRI = LV_SBIN.
        ENDIF.
      WHEN 'Z_TOKHAI'.
        IF LS_OBJECTDATA-AUSP1 <> '?'.
          ES_CLASSIFICATION-Z_TOKHAI = LS_OBJECTDATA-AUSP1.
        ENDIF.
      WHEN 'Z_VENDOR'.
        IF LS_OBJECTDATA-AUSP1 <> '?'.
          ES_CLASSIFICATION-VENDOR_CODE = LS_OBJECTDATA-AUSP1.
        ENDIF.
        IF ES_CLASSIFICATION-VENDOR_CODE IS INITIAL.
          ES_CLASSIFICATION-VENDOR_CODE = LS_LFA1-LIFNR.
          SHIFT ES_CLASSIFICATION-VENDOR_CODE LEFT DELETING LEADING '0'.
        ENDIF.
        IF ES_CLASSIFICATION-VENDOR IS INITIAL.
          IF LS_OBJECTDATA-AUSP1 <> '?'.
            ES_CLASSIFICATION-VENDOR = LS_OBJECTDATA-AUSP1.
          ENDIF.
        ENDIF.
        IF IV_VENDORTAB = 'X'.
          IF LS_OBJECTDATA-AUSP1 <> '?'.
            CALL FUNCTION 'NUMERIC_CHECK'
              EXPORTING
                STRING_IN = LS_OBJECTDATA-AUSP1
              IMPORTING
                HTYPE     = LV_HTYPE.

            IF LV_HTYPE = 'NUMC'.

              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  INPUT  = LS_OBJECTDATA-AUSP1
                IMPORTING
                  OUTPUT = LV_LIFNR.

              SELECT SINGLE *
                FROM LFA1
                INTO LS_LFA1
                WHERE LIFNR = LV_LIFNR.

              CONCATENATE LS_LFA1-NAME2 LS_LFA1-NAME3 LS_LFA1-NAME4 INTO LV_NAME_234 SEPARATED BY SPACE.
              IF LV_NAME_234 IS NOT INITIAL.
                CONCATENATE LS_LFA1-NAME1 `_` LV_NAME_234 INTO LV_NAME.
              ELSE.
                LV_NAME = LS_LFA1-NAME1.
              ENDIF.
              IF LV_NAME IS NOT INITIAL.
                ES_CLASSIFICATION-VENDOR = LV_NAME.
              ELSE.
                ES_CLASSIFICATION-VENDOR = ES_CLASSIFICATION-VENDOR.
              ENDIF.
            ELSE.
              ES_CLASSIFICATION-VENDOR = LS_OBJECTDATA-AUSP1.
            ENDIF.

          ENDIF.
        ENDIF.
      WHEN 'Z_NGAYNHAPKHO2'.
        IF LS_OBJECTDATA-AUSP1 <> '?'.
          CALL FUNCTION 'CONVERSION_EXIT_PDATE_INPUT'
            EXPORTING
              INPUT        = LS_OBJECTDATA-AUSP1
            IMPORTING
              OUTPUT       = ES_CLASSIFICATION-Z_NGAYNHAPKHO
            EXCEPTIONS
              INVALID_DATE = 1
              OTHERS       = 2.
          IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
          ENDIF.
        ENDIF.
      WHEN 'Z_INSP_MANUAL'.
        IF ES_CLASSIFICATION-Z_INSP_MANUAL IS INITIAL.
          IF LS_OBJECTDATA-AUSP1 <> '?'.
            ES_CLASSIFICATION-Z_INSP_MANUAL = LS_OBJECTDATA-AUSP1.
          ENDIF.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

ENDFUNCTION.
